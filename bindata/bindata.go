// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.
// sources:
// rules/base.toml
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd6\x4f\x4f\x1b\xc7\x1b\x07\xf0\xbb\x25\xbf\x87\x51\x72\xe0\xf7\x3b\x14\x35\x4a\x0f\x51\x55\xae\x3d\xf6\xd4\x1b\x8a\x46\xe3\xdd\x07\x33\x65\x77\x76\x35\x33\xeb\xe0\x1b\x04\xc2\x9f\x0a\x07\x53\xc5\x05\x9c\x20\x6a\x95\x02\xad\x14\xe3\x2a\x08\x8c\x0d\xf1\x9b\xd9\xd9\x3f\x27\xde\x42\xb5\x3b\x36\xc5\xd8\xae\xe3\xaa\xb9\xec\x0c\xda\xef\xee\x67\x9f\x67\x86\x5d\x4b\x2a\x2d\x40\x33\xe8\x51\x9e\x4a\x8b\xe4\xbe\xb0\xa9\x30\x1c\x36\x47\xf3\x48\x0f\x8f\xb2\x99\x6c\xe6\x31\x72\xb9\xf3\x03\x18\x32\x9b\x99\xed\xce\xc4\xf3\xe4\xc4\xdd\x5f\xd3\xdd\x49\x6f\xc4\x05\x2a\x68\x8e\x5a\x54\x16\x9f\x67\x33\x26\x08\x83\x53\x57\x52\x87\xcd\xa0\xa9\xb8\x76\x15\xbe\xad\xab\xed\xb3\xe8\x64\x39\x58\x3a\x99\xca\x66\x16\xa0\xf8\xc2\xe1\xa6\x98\x41\x53\x94\x49\xe0\x8c\x58\x53\xff\x7c\x7b\x97\xe4\x41\x60\x62\x18\x20\x04\xb6\xa0\x00\xd6\x08\x26\x38\x58\x89\xf7\xcb\xfd\x86\xcb\x69\x81\x48\x18\x43\x08\x30\x3c\x4e\x65\x11\x13\x66\x62\xc3\xb1\x5d\x8b\x12\x66\x00\x06\x46\x72\x16\x98\x03\x5e\xb0\x77\xa6\xca\xc7\xaa\x7c\x16\xbe\x39\xd5\xcd\x54\xf5\x4d\xf5\xea\x54\xfd\x78\x18\xad\xdc\xf4\x3f\xc1\xf7\xdc\x1b\xc7\x13\xd7\xe5\x4e\x81\x58\x02\xe7\x60\xce\xe1\x80\x6d\xe0\x79\x18\x50\x55\x79\x43\x5d\x5d\xa8\xcd\x92\xe6\xe3\xa5\x6a\xd4\x59\x57\xf5\x5a\xb0\x79\xd5\x47\x3e\x19\xd3\x4f\x4f\xcc\x63\xee\x59\x20\xb0\xc7\x04\xcd\x33\x48\x6b\xb6\x69\xba\xd0\x0f\x0a\x7d\x7d\x1a\x2f\x2d\xfb\xed\x5f\xc3\x5f\x96\xb5\x1a\x75\xde\x46\x9d\xf5\xf0\xfd\x47\x55\x2e\x4d\x5c\xe8\x3d\xda\x70\x6c\x2a\x25\x70\x6c\xcc\x83\xb1\xf0\xd9\x61\xee\x48\x30\x24\x98\x38\xc7\x09\x33\xe6\xe1\xb3\x97\xda\xdd\xaf\xd2\x59\x00\x36\x88\x75\x53\x48\xa7\x50\x9a\xea\x27\xbe\x25\x96\x18\x67\x98\xe0\x5a\x4e\x11\x2f\x40\x71\xb4\xa0\x33\x28\xc9\x4c\x0e\xcc\x51\x0b\xb0\x4b\x5d\xb0\x28\x1b\xdc\x8f\x43\x53\x13\x37\x2a\xdd\xeb\xe6\x58\x05\xe9\x1c\xfa\xaf\x1c\x2c\x64\xf2\x5e\xf9\x54\x0e\xe9\x78\xbf\xfa\x9d\xc3\x26\x55\xa9\x4d\x86\xfc\x67\x8f\x42\xd3\xf4\xc4\x66\xba\x1e\x86\x63\x82\xf3\x82\x01\x1f\x5d\x62\x92\x43\x7f\xe7\x26\xee\xa8\x98\x27\x1c\x4c\xcc\x3d\x96\x5c\x3e\xf2\x65\xd9\xe3\x74\x1c\x75\xe3\xa8\x1b\x9f\x7c\x53\xf6\x3c\x7d\xbf\x91\x5c\xcf\xd1\xb1\x7f\xcf\x30\x47\x7e\xa2\x74\x97\x1c\xd1\xc9\xc7\xc8\x13\xc0\xb3\x99\xd9\x64\x48\x96\x45\x4f\xa6\x89\x69\x53\xa6\x8f\xd8\x26\x8b\x98\x79\x76\x6e\xd8\xba\x45\xc7\xcb\xc1\x9f\x2f\xf5\xf7\x26\xac\xd7\xc2\xf2\x9a\xda\xd9\x0b\x2a\x8d\x78\x7d\xdb\x6f\x96\xa2\xe3\xe5\xe8\xe2\x55\xd4\x59\x7f\xe2\x37\xff\x18\xf2\x3d\xe8\x5a\x9e\x49\xa5\xc3\x7b\x23\xb6\x80\x08\xd9\x13\x51\x3f\x89\xee\xcc\x68\xfd\x83\x6a\xec\x44\xf5\x8f\xe1\x4d\xdd\x6f\x2e\xa9\x72\x49\xd5\x6b\x51\xbd\xe6\xb7\x5a\x6a\x67\xef\x1e\x86\xfa\xb5\xee\x91\x11\x43\xd2\x02\x60\x49\x6d\x18\x24\xfc\x66\x29\xdc\x6f\xab\x9b\x8a\x3a\xaa\xaa\xc6\x8e\x3a\xfa\x3d\xa8\x34\x6e\xaf\xb7\xd4\xc6\x7e\x74\xb2\xe6\x37\x5b\x7e\xb3\x14\x9c\xb7\xa3\xcb\x95\xf0\xcd\x69\xb0\x71\xd9\xcf\x3d\xfd\x52\xb7\x36\x2d\x28\x9b\x99\x4d\x47\x0c\x05\x60\x52\x4c\x0f\x07\xa3\xd7\x97\x6a\xfb\xe7\xa8\xb3\x13\xbc\x3b\x0c\x76\x7f\x53\x9d\xdd\xb0\xba\xaa\xd9\x07\xa5\x3c\xeb\xdd\x3c\x59\x1b\x24\x40\x4a\xca\xf2\xd9\xcc\x6c\x77\x96\xae\x61\x6f\x3e\xed\x12\x21\x92\x2b\xa7\x6d\xca\xa8\xed\xd9\xd8\x02\x96\x97\xf3\x83\xbe\x2e\x43\x77\x53\x9d\xad\x25\xdf\x9b\xdd\x8b\xdb\xeb\x2d\xdd\xeb\xb0\xba\x1a\xbc\x5b\x0a\x0f\xdf\xeb\x53\x61\x75\x35\xae\x74\x54\xeb\xb8\xff\xd1\x9e\xdd\x97\x05\x08\x41\x1d\x86\x61\xd1\xa5\x1c\xb0\x09\x16\x29\x8e\x62\xfd\xeb\x6a\x74\x76\x10\xb7\xf7\xa2\xfa\x51\xd8\x3e\x0f\xb6\x12\x3c\xde\x3d\x4f\x1a\x5e\xaa\xf8\x37\xa5\xaf\xd5\xc6\x5a\xfc\xd3\xe1\x60\x97\x87\x54\xaa\x77\x4f\xfa\x83\x09\x16\x07\xc5\xa0\x5d\x8b\x2e\x3e\xe8\x3a\xd4\x51\x29\x38\x78\xa9\x5a\xc7\xba\x3e\xd5\xd8\x8e\x6b\x57\x41\xa5\xf1\xbf\x6f\x66\xbe\xba\xbd\xde\xd2\x0f\xf4\xf4\xff\x0f\xd8\xbf\x02\x00\x00\xff\xff\x02\x54\xe9\xb9\xb3\x0a\x00\x00")

func baseTomlBytes() ([]byte, error) {
	return bindataRead(
		_baseToml,
		"base.toml",
	)
}

func baseToml() (*asset, error) {
	bytes, err := baseTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.toml", size: 2739, mode: os.FileMode(438), modTime: time.Unix(1677139545, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base.toml": baseToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"base.toml": &bintree{baseToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
