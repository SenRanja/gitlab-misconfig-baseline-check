// Code generated by go-bindata. DO NOT EDIT.
// sources:
// rules/base.toml
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x41\x4b\x1b\x41\x14\xc7\xef\xf9\x14\x83\x97\x9c\x2a\xf8\x01\xbc\xf6\xd8\x53\x6f\x22\xc3\x64\xf6\x99\x4c\x33\x3b\xb3\xcc\xcc\xc6\xe6\x96\x54\x6c\x6a\x21\x75\x85\x16\x6c\xa5\xb4\xa1\xa0\x52\xe8\x6a\x29\x88\x5a\x34\x5f\x26\x93\xdd\x7c\x8b\x92\xcc\x46\x4d\x4c\x52\xb7\xd4\x4b\xde\x1c\x7e\xf9\xff\x78\x6f\x5e\x26\x86\x19\x0e\x68\x15\x2d\x95\x99\xe1\xa4\xf4\xc4\x67\x9a\x4a\xb1\xc1\xca\xc8\x95\xa5\x42\x61\x2d\x50\xf2\x05\x50\xa3\xd7\x6f\x8f\xcb\xd9\x61\x5c\x71\x8d\x69\x56\x62\x9c\x99\xfa\x7a\xc1\x03\x4d\x15\x0b\x0c\x93\x62\x15\x15\x07\x9d\x8b\xe4\x20\xb6\xbb\x27\xe9\x51\xb3\xdf\x38\x2a\x16\xaa\x50\xdf\x94\xca\xd3\xab\xa8\xc8\x84\x01\x25\x08\x2f\x16\x16\x44\x07\xa4\x0c\x1a\x13\x4a\x41\x6b\xcc\xa1\x06\x7c\xb6\xa2\xff\x79\x6b\xf0\x31\x9a\xc8\x0f\x14\xab\x11\x03\x0b\xe3\x35\xd0\x50\x31\x53\xc7\x44\x78\x98\x4a\x3f\xe0\x8c\x08\x0a\x18\x04\x29\x71\xf0\xa6\x5d\xfd\xfd\x13\x1b\x1d\xda\xe8\x24\x79\x7f\xec\x66\x66\xe3\x1d\xbb\x7d\x6c\xdf\x7e\x49\xb7\xae\x26\xec\xcf\x55\xb8\x58\x4d\x82\x40\xc9\x1a\xe1\x1a\x97\x60\x43\x2a\xc0\x3e\xa8\x32\x4c\x1b\x6d\xf4\xc6\x5e\x9c\xd9\x9d\xb6\x53\x0f\x1a\x9f\xd2\x6e\xcb\xc6\x9d\xfe\xce\xc5\x5d\xdd\xca\xc2\x19\x86\xba\x82\x55\xc8\x41\xe3\x50\x68\x56\x16\x30\xea\xd5\x67\xc3\x5b\x9d\x6a\xf0\xdd\xf1\xa0\xd1\xec\xfd\xfe\x96\x7c\x6d\x3a\x63\xda\x3d\x48\xbb\xad\xe4\xc7\xb5\x8d\xda\xf9\x1a\xbc\xa3\xa5\xd2\x67\xc6\x80\xc2\xb4\x02\xb4\xfa\xa8\x52\x25\x0d\x50\x03\x1e\x2e\x29\x22\x68\x05\x1e\xb5\xc5\x6c\x2f\x8d\xac\x82\xb8\x27\xca\x20\xe4\x20\x34\x82\x26\xe2\x9f\x12\xae\x17\xe7\x7b\x10\x70\x59\xc7\x55\xa8\xcf\x4d\x77\x08\x1a\x22\x39\xc3\x37\x18\x07\x1c\xb0\x00\x38\x13\xf7\xf6\x6e\x26\x94\x6f\x38\xa3\x7d\xf6\xfe\x66\x40\x0e\x43\xff\xc5\x81\xb5\x19\xbe\x17\x0f\x54\x21\x47\x4f\x18\x9f\x49\x91\xcf\xc8\x7c\x72\xff\x57\x3b\x4f\x38\x82\xf3\xf9\x46\x17\x40\xa5\x07\x72\x53\x80\x9a\xdb\xda\x10\x43\xb7\x58\xbe\x29\xea\x0a\x51\xe0\x61\x15\x8a\xe1\x77\xe7\x3d\x7e\x63\x95\xa3\x51\x46\xa3\x8c\xce\xb9\x7c\x63\x97\x0b\x9b\xa7\x1a\x3b\x1c\xf5\x8f\x0a\x21\xcd\xc3\x2c\x37\xe0\xac\xe9\x15\xd6\x42\x3d\x9a\xbf\xab\xcb\xc4\xf3\x99\x70\x9f\xd8\x27\x2f\xb1\x08\xfd\xd2\x8c\xfb\x49\x0f\x9b\xfd\x9f\xaf\xdc\x7f\x45\x12\x77\x92\xe8\xb5\xdd\xdb\xef\x7f\x38\x1d\xb4\x76\x7b\xe7\xed\xf4\xb0\x99\x9e\x6d\xa7\xdd\xd6\x4a\xef\xfc\xfb\xf4\x7b\x9e\x79\x42\x8f\x19\xa9\xc6\xf5\xae\x0b\x4d\xc8\xd0\x8d\x2d\x6d\xfd\xb2\xa7\x7b\x69\x7c\x9d\x5c\xc5\xbd\xf3\x86\x8d\xda\x36\xee\xa4\x71\xa7\x77\x79\x69\xf7\xf6\x6f\x35\x68\xe8\xf9\x13\x00\x00\xff\xff\x0f\xaf\x44\x60\x04\x08\x00\x00")

func baseTomlBytes() ([]byte, error) {
	return bindataRead(
		_baseToml,
		"base.toml",
	)
}

func baseToml() (*asset, error) {
	bytes, err := baseTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.toml", size: 2052, mode: os.FileMode(420), modTime: time.Unix(1667979669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base.toml": baseToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"base.toml": &bintree{baseToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

