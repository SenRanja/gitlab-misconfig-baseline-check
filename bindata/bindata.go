// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.
// sources:
// rules/base.toml
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\xd6\x4d\x6f\x1a\x47\x18\x07\xf0\xbb\x25\x7f\x87\x51\x2e\x9c\x1a\x91\x4a\x95\x7a\xe1\xda\x63\x4f\xbd\x45\xd5\x68\xd8\x7d\x8c\xa7\xde\x9d\xdd\xce\xcc\x92\x72\x83\xd8\x31\x76\x15\x62\x90\x42\xfd\x96\x28\x45\x75\x6d\xb7\x6a\xd7\x44\x6d\x0d\xb6\xe3\xf0\x65\x98\xdd\xe1\x94\xaf\x50\xb1\x03\x2d\x5b\xa0\x98\x36\xb9\xec\x8b\xf8\x33\x3f\x9e\xd9\x61\xe7\x91\x54\x3a\x80\x72\xe8\x5e\x81\x4a\x87\xe4\x3f\x72\xa9\xb0\x3c\xb6\x46\x0b\xc8\x9c\xee\xad\xae\xac\xae\x3c\xf4\xb9\xf7\x15\x58\x52\x7c\x99\xba\xbb\xef\x03\xc7\x3e\x29\x00\xa6\x12\xdc\xe1\x87\x36\x08\x8b\x53\x5f\x52\x8f\xa1\x1c\xca\xa8\x9d\xed\x41\xeb\x0f\x7d\xd1\x89\x5e\x3f\x56\x27\x5b\x71\x7d\xfb\xdd\x9b\xa7\xfa\x59\x47\xed\x7d\x37\x68\x5d\xc5\xc7\x61\x7c\xb4\xa5\x6a\xcd\xe8\x97\x96\xc9\x44\xcd\xf6\xa0\xba\x97\x59\x5d\xd9\x80\xd2\x23\x8f\xdb\x02\xe5\xd0\xc7\xd9\x6c\x76\xd2\x74\xc9\x37\x98\x58\x5f\x07\x94\xcf\x65\x8d\xa0\x7b\x8d\xe8\xc5\xab\x68\xff\x47\xd5\xdb\x8f\x8f\xb6\xa2\x17\x65\x75\x72\x16\xbd\x6c\xc5\xc7\x61\xd4\x6c\xa7\x91\x4f\xb2\xd9\x84\x49\x15\x67\x2e\xc6\x67\x5c\xa4\x82\xe6\xa9\x43\x65\x29\x2d\xe6\x50\xc6\x14\xa3\xf6\x2e\xf4\x59\x25\x2a\x9f\x4d\x8c\x9d\x43\x19\xca\x24\x70\x46\x9c\xcc\xbf\x0f\x3f\x9c\x47\x81\x89\x65\x81\x10\xd8\x81\x22\x38\x73\x98\xe8\xe5\xe6\xe0\xb0\x9e\x36\x7c\x4e\x8b\x44\xc2\x02\x42\x80\x15\x70\x2a\x4b\x98\x30\x1b\x5b\x9e\xeb\x3b\x94\x30\x0b\x30\x30\x92\x77\xc0\x9e\xf2\xa2\x83\x0b\x55\x3f\x55\xf5\x8b\xf8\xf9\xb9\x59\x1e\x2a\xdc\x55\x4f\xce\xd5\xb7\xaf\xf4\xe6\x6d\xfa\x17\x7c\xc1\x83\x45\x3c\xf1\x7d\xee\x15\x89\x23\x70\x1e\xd6\x3c\x0e\xd8\x05\x5e\x80\x29\x55\xd5\x77\xd4\xd5\xa5\xda\xad\x19\x7e\x50\x3e\xd2\xbd\xaa\x0a\x5b\xd1\xee\x55\x8a\x7c\xb0\x60\x3e\x03\xb1\x8e\x79\xe0\x80\xc0\x01\x13\xb4\xc0\x20\xa9\xd9\xa5\x52\x4c\x17\xfa\xec\x7c\x50\xae\xf4\x6f\x7e\x88\xbf\xaf\x18\x55\xf7\x8e\x75\xaf\x1a\xff\xfa\x56\xd5\x6b\x4b\x17\x3a\x41\x5b\x9e\x4b\xa5\x04\x8e\xad\x75\xb0\x36\x3e\x38\xcc\x3d\x09\x96\x04\x1b\xe7\x39\x61\xd6\x3a\x7c\xf0\x52\x47\xeb\x55\x7a\x1b\xc0\xa6\xb1\x51\x0a\x99\x14\x4a\x52\x69\xe2\x33\xe2\x88\x45\x86\x0d\xbe\xe3\x95\xf0\x06\x94\xe6\x0b\x26\x83\x86\x99\xe5\x81\x35\xea\x00\xf6\xa9\x0f\x0e\x65\xd3\xeb\x71\x66\x6a\xe9\x89\x4a\xd6\xba\xbd\x50\x41\x26\x87\xde\x97\x83\x85\x1c\xbe\x57\xee\xca\x21\x13\x4f\xab\x9f\x7b\x6c\x59\x95\xba\x64\xc6\x3f\x7b\x1e\x9a\xa4\x97\x36\x93\xe7\x61\x79\x36\x78\x8f\x18\xf0\xf9\x25\x0e\x73\xe8\xef\xdc\xd2\x33\x2a\xd6\x09\x07\x1b\xf3\x80\x0d\xbf\x3e\xf7\x65\x39\xe6\x4c\x1c\x8d\xe2\x68\x14\x5f\x7e\x51\x8e\x3d\x33\xde\x5c\x6e\xec\x98\xd8\x7f\x67\x98\x27\xef\x28\xfd\x95\x9c\x33\x93\xab\x2b\x0f\x03\x61\x1e\x88\xb9\xb8\x4f\x6c\x97\x32\x73\xc4\xc3\xed\x9b\x05\x6e\x7e\xd6\x13\xd3\xa7\x95\xe8\xf5\x63\xb3\xd3\xc4\x61\x2b\xae\x6f\xab\xc6\x81\xe9\x09\xfa\xdd\x9a\x3e\xad\xe8\xcb\x27\xba\x57\x7d\xd0\xef\xfe\x3c\x63\x27\x18\x59\x81\x4d\xa5\xc7\xc7\xe7\x49\x0f\xcd\xe8\x14\x12\x51\x57\x7f\x53\xed\x86\x0e\xdf\xc6\xb7\x61\xbf\x5b\x56\xf5\x9a\x0a\x5b\x3a\x6c\xf5\xaf\xaf\x55\xe3\x20\xdd\x29\x4c\x5a\xa3\x23\x23\x96\xa4\x45\xc0\x92\xba\x30\x4d\xf4\xbb\xb5\xf8\xf0\x46\xdd\x36\xd5\xc9\x91\x6a\x37\xd4\xc9\x4f\x51\xb3\xfd\xee\xcd\x53\xb5\x73\xa8\xcf\xb6\xfb\xdd\xeb\x7e\xb7\x16\xfd\x7e\xa3\x3b\x9b\xf1\xf3\xf3\x68\xa7\xf3\x0f\xee\xd3\xec\x68\x4e\x93\x82\x30\x14\x81\x25\x1b\x58\xea\xfe\xff\x34\x62\xa6\x41\x8a\xf6\x2f\xef\xde\x8b\xa5\xe8\xd9\x55\xcf\x6c\xc1\x4c\xed\x33\x0a\x4c\x8f\xf8\x9e\xbb\xba\x3f\x03\x00\x00\xff\xff\xc8\xa8\xe0\xbb\xe2\x0a\x00\x00")

func baseTomlBytes() ([]byte, error) {
	return bindataRead(
		_baseToml,
		"base.toml",
	)
}

func baseToml() (*asset, error) {
	bytes, err := baseTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.toml", size: 2786, mode: os.FileMode(438), modTime: time.Unix(1676624403, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base.toml": baseToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"base.toml": &bintree{baseToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
