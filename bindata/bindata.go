// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.
// sources:
// rules/base.toml
// rules/output.toml
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\x4f\x4f\xe3\x46\x18\xc6\xef\x96\xfc\x1d\x46\xcb\x81\xf6\x50\xd4\xed\xf6\xb0\xaa\xca\xb5\xb7\xf6\x50\xf5\x86\x56\x23\xc7\x7e\x09\x53\xec\xb1\x3b\x33\xce\x92\x1b\x2c\x2c\xb0\x15\x59\x42\xb5\x29\x7f\x76\x11\x8d\x4a\x81\x56\xda\x90\x6a\x11\x84\x04\x36\x5f\xc6\x63\x3b\x27\xbe\x42\x65\x4f\xc2\xe2\x84\x14\x52\x75\x2f\x9e\x01\x3f\xf6\xef\x7d\x9e\xf7\xd5\x38\x82\x08\x1b\xd0\x24\x7a\x90\x27\xc2\x36\x72\x9f\x39\x84\x9b\x2e\x9d\x26\x79\xa4\x96\x07\xba\xa6\x6b\x63\xc8\x63\xee\x8f\x60\x0a\x5d\x9b\xea\xee\xf8\x93\xf4\xc6\xf5\x9f\x13\xdd\x4d\x6f\xc5\x05\xc2\x49\x8e\xd8\x44\x14\x9f\xe8\xda\x98\x05\xdc\x64\xc4\x13\xc4\xa5\x93\x68\xbc\x53\x3d\x8f\x5e\xd7\xe4\xfa\x71\x7c\xb8\x10\xce\x1f\x8e\xeb\xda\xd8\x2c\x14\x9f\xba\xcc\xe2\x93\x68\x9c\x50\x01\x8c\x1a\xf6\xf8\x1d\x04\xcf\xc8\x03\xc7\x86\x69\x02\xe7\xd8\x86\x02\xd8\xc3\x48\xe1\xee\x62\x67\xbb\xdc\x87\xf1\x18\x29\x18\x02\xee\xa2\x70\x30\x7d\x46\x44\x11\x1b\xd4\xc2\xa6\xeb\x78\x36\x31\xa8\x09\x18\xa8\x91\xb3\xc1\x1a\x44\x86\x5b\xc7\xb2\x7c\x20\xcb\xc7\xd1\xab\x23\x15\xaa\xac\xbd\x90\xcf\x8f\xe4\xcf\x7b\xf1\xe2\x65\x5f\x11\x3f\x30\x5f\x55\x30\xbc\x00\xc3\xf3\x98\x5b\x30\x6c\x8e\x73\x30\xed\x32\xc0\x0e\xb0\x3c\x5c\xff\x1b\x53\xdf\xc9\x01\x7b\xa2\x6b\xd9\x32\xbe\x4d\x54\xe8\x7b\xf8\xc9\x07\x2e\x90\xac\x55\xc3\x17\xe7\x41\xb3\x19\x56\xea\xe3\xba\xf6\xa1\x82\x2f\xfe\x1d\xee\xf9\x7c\x06\x33\xdf\x06\x8e\x7d\xca\x49\x9e\x42\x1a\x82\x43\xd2\x01\xe8\x33\xfe\xf2\xa8\x33\xbf\x10\xb4\x7e\x8f\x7e\x5b\x50\x21\xc4\xed\xd7\x71\x7b\x25\x7a\xfb\x5e\x96\x4b\x19\xea\x7d\x7c\xdf\x40\x9b\xae\x43\x84\x00\x86\xcd\x19\x30\x67\x3f\x3a\x98\xb9\x02\x4c\x01\x16\xce\x31\x83\x9a\x33\xf0\xd1\xad\x76\x67\x58\xb8\xb3\x40\x07\x61\x5d\x15\x52\x2a\x94\xaa\xb2\x88\x6f\x0c\x9b\xdf\xc5\xb0\xc0\xb3\xdd\x22\x9e\x85\xe2\x70\x82\xd2\xa0\x44\x33\x3a\x60\x9a\xd8\x80\x3d\xe2\x81\x4d\x28\x0c\x43\x64\x55\x23\x07\x95\x8e\xbe\x75\x27\x05\x29\x1d\xfa\xbf\x38\x98\x8b\xe4\xac\xb9\x2f\x0e\x29\x79\x96\xfa\x9d\x4b\x47\xa5\x12\xc7\xc8\xdf\xdb\x23\x4a\xd5\x23\x33\xd3\x7e\x98\xae\x05\xee\x53\x0a\x6c\xb8\xc5\x44\x87\x3e\xe8\x46\x4e\x94\xcf\x18\x0c\x2c\xcc\x7c\x9a\x3c\x7e\xe3\xf4\xbc\x1d\xa7\xe4\xa8\x2b\x47\x5d\xf9\xe8\x43\xd9\xe3\xa9\xf7\x0d\xc5\xf5\x38\x4a\xf6\xdf\x31\xd4\x15\xf7\x24\x5d\x2b\x87\x24\x39\x86\x7c\x0e\x4c\xd7\xa6\x92\x25\x69\x8b\xda\x4c\x18\x96\x43\xa8\xba\x62\xc7\x98\xeb\x9e\xfe\x83\x7d\x8b\x0f\x16\xc2\xbf\x9f\xa9\xef\x4f\x54\xab\x46\xe5\x65\xb9\xb1\x15\x56\xea\x9d\x95\xf5\xa0\x51\x8a\x0f\x16\xe2\xd3\xe7\x71\x7b\xe5\x61\xd0\xf8\x2b\x53\xc1\xc3\xd4\x68\x97\xe5\x5b\x44\xb8\xac\xb7\x62\x1b\x0c\x2e\x7a\x44\x94\x45\xa2\x6b\x66\xbc\xf2\x4e\xd6\x37\xe2\xda\xfb\xe8\xb2\x16\x34\xe6\x65\xb9\x24\x6b\xd5\xb8\x56\x0d\x9a\x4d\xb9\xb1\x75\x03\x86\xb2\xb4\xee\x95\x1a\xa6\x20\x05\xc0\x82\x38\x30\x88\x08\x1a\xa5\x68\xbb\x25\x2f\x2b\x72\x7f\x47\xd6\x37\xe4\xfe\x9f\x61\xa5\x7e\x75\xb1\x26\x57\xb7\xe3\xc3\xe5\xa0\xd1\x0c\x1a\xa5\xf0\xa4\x15\x9f\x2d\x46\xaf\x8e\xc2\xd5\xb3\x2c\xee\xd1\xe7\x2a\xda\xd4\x90\xae\x4d\xa5\x2b\x86\x02\x50\xc1\x27\x6e\x07\xc6\x2f\xcf\xe4\xfa\xaf\x71\x7b\x23\x7c\xb3\x17\x6e\xfe\x21\xdb\x9b\xd1\xce\x92\xc2\xf6\x59\x79\xdc\x7b\x79\xd2\x1b\xc4\x41\x08\x42\xf3\xba\x36\xd5\xdd\xa5\x3d\xec\xed\x27\x3c\x83\xf3\xe4\xc9\x09\x87\x50\xe2\xf8\x0e\xb6\x81\xe6\xc5\xcc\x20\x5f\xd9\x50\x69\xca\xe3\xe5\xe4\x7b\xb3\x79\x7a\x75\xb1\xa6\xb2\x8e\x76\x96\xc2\x37\xf3\xd1\xde\x5b\x75\x2b\xda\x59\xea\x54\xda\xb2\x79\x90\x2d\xed\xf1\x4d\x32\x07\xce\x89\x4b\x31\xcc\x79\x84\x01\xb6\xc0\x36\x8a\xc3\xb0\xc1\xc5\x4e\x7c\xbc\xdb\x69\x6d\xc5\xb5\xfd\xa8\x75\x12\xae\x25\xf0\xce\xe6\x49\x12\x78\xa9\x12\x5c\x96\xbe\x92\xab\xcb\x9d\x5f\xf6\x06\x53\xbe\xc5\xa9\x9a\x9e\xf4\x17\x14\xcc\x0d\x12\xc3\x56\x35\x3e\x7d\xa7\x7c\xc8\xfd\x52\xb8\xfb\x4c\x36\x0f\x94\x3f\x59\x5f\xef\x54\xcf\xc3\x4a\xfd\x93\xaf\x27\xbf\xbc\xba\x58\x53\x05\x3d\xfa\xb4\x0f\xab\x6b\xff\x04\x00\x00\xff\xff\xeb\xde\x32\x99\xcd\x0a\x00\x00")

func baseTomlBytes() ([]byte, error) {
	return bindataRead(
		_baseToml,
		"base.toml",
	)
}

func baseToml() (*asset, error) {
	bytes, err := baseTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.toml", size: 2765, mode: os.FileMode(438), modTime: time.Unix(1678354675, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _outputToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x58\x4d\x73\xda\x48\x1a\xbe\xbb\xca\xff\x81\x62\x2f\xbb\x97\x54\x26\x7b\xd9\xda\x2a\x1f\x72\xdc\xc3\x56\xe5\x30\xb7\x99\x29\x4a\x86\x8e\xad\x0d\x16\xac\x10\x71\xe6\x86\x6d\x3e\x84\x01\x43\x12\xbe\x8d\x8d\x49\xc0\x66\x92\x20\xe1\xd8\x71\x84\x04\xe1\xc7\xa4\xbb\x25\x9d\xfc\x17\xb6\x5a\x2d\x18\x59\x92\x3f\xaa\x66\xf6\xe2\xc2\xd2\xdb\xef\xfb\x3c\x4f\xbf\x1f\xdd\x12\x58\x21\x0a\xd6\x82\xb1\xa4\x10\x4f\x0a\x81\x84\xf0\x6b\x14\x04\x18\x2e\x12\x88\x80\x44\x98\x67\xe3\x02\x1b\xe3\x82\xab\x2b\xab\x2b\x7f\x09\x6c\xb0\x42\x94\x59\x0f\xbc\x04\x7c\x82\x8d\x71\x81\x6d\x56\xd8\x0c\xf0\x6c\xe2\xc5\xea\xca\x4f\xf6\xb3\x5f\x56\x57\xc2\x9b\x20\xfc\x22\xc4\x27\x89\x4f\x3d\x2f\xe2\xce\xa7\xe0\xea\x4a\x02\x84\x63\x5c\x24\xe4\x7c\x47\x9d\x51\x0b\xf3\xfd\x81\xd9\xfa\x0d\xbf\x4f\xe1\x2f\x85\xe0\xea\xca\x0b\xf0\xeb\x76\x8c\x8f\xac\x05\x83\xab\x2b\x0e\x14\x6b\x41\x34\x7b\x8b\xf2\x25\xe7\x4a\xdc\x94\x51\xe5\x14\x8d\x9a\xa8\x33\x44\x52\x1e\x65\x86\xd4\x57\x70\x75\x85\x89\xbc\x64\xc3\x60\x2d\x88\x0f\x2f\x71\x7d\xec\x5c\x64\xd3\x61\x22\x5b\x2c\x17\x48\x00\x41\x60\xb9\x8d\xd5\x95\x9f\xec\x5f\x89\x5f\x1c\xbf\x1f\xc5\x99\x44\x82\x80\x71\x31\x43\x72\x56\x3f\xd9\x41\xfd\x12\x3e\xda\x45\xea\xa9\x03\xb4\xc0\x27\x81\x1b\xf6\x4d\xe3\x25\xcf\x05\xc2\xdb\xde\x7b\x51\x3c\x8a\x02\x6e\x43\xd8\xf4\x05\x03\x67\x25\x5c\x1b\xdf\x8d\xc4\x38\xdd\xc1\xe7\xbb\xb8\x3e\xc6\x17\x43\x94\x2d\x62\xb1\x8e\xab\x13\xb2\xbc\x3a\xc4\xe2\x57\xbd\x9d\xa6\xae\x70\x27\x85\xc6\x65\xb3\x36\xa7\xd4\x96\x38\x35\xd5\x90\x24\xa7\x09\x8d\x89\x3a\xc3\x7f\xc0\x59\x09\x95\xf7\xa1\x36\x80\xca\xbe\x3f\x74\x2e\xb9\xe5\xc2\x6d\xa3\xa9\x8d\xd1\xa8\xe1\xc1\xfd\xbb\x61\x08\x70\x6b\xc1\x85\x9b\x10\x0f\xfe\x9b\x64\x79\x10\xe2\x92\x5b\xee\xf4\x78\x28\x3b\x2b\x67\x9c\xc1\xd1\xa8\xa1\x7f\xba\x8d\xa9\xaf\xa1\x0f\xbf\x64\x3c\x0e\x78\x5f\x86\xa8\x7f\x86\xb2\x2d\x34\x6a\x60\xb9\xf4\xe7\xec\x8f\x83\x81\xd3\xf9\x03\x78\xf8\x9a\xfb\x25\x5a\x6c\xfb\x36\x36\xe3\xf2\xff\x91\xcd\x4d\xe7\x77\xf0\x70\x18\xde\xc5\x23\x11\x07\x61\x96\x89\xfa\x32\xd1\xf3\x13\x2c\xed\xeb\x9f\x4e\x51\xf9\xeb\x9f\xce\xc4\xe5\xfc\x76\x26\x4e\xc3\x25\x13\x27\x17\x61\x3b\x16\x7a\xce\x84\x85\x18\x1f\x62\x92\xde\xe2\x2f\x17\xd1\xe1\x89\x7e\x79\x62\x48\x7d\x43\xde\xb9\xa7\x13\x55\x64\xbd\x3a\x74\x2d\x81\x4a\xe1\x7a\x5a\xb4\xa9\xb4\x34\x34\xab\x99\x9d\x94\x71\xba\x03\x67\x73\x62\x4c\x9b\xd3\x9b\x22\xce\x17\x70\x47\x85\xca\x3e\xa1\x5b\xba\xc0\x8d\x2b\x9b\x74\xbe\x64\xec\xcd\xf4\x96\x66\xb6\xb2\x0e\xa2\xba\xf6\x16\x1f\x77\x68\x2f\x83\x5a\x06\xce\x3a\xb8\x5c\xd1\xfb\xea\xf5\xb4\x48\x35\x30\x3f\x36\xf1\xd1\x9e\xd9\xaa\xd0\xc8\x68\x9a\x42\x15\xd9\xcb\xc6\xa9\x04\x0f\x36\xd8\x84\x60\xe5\xa5\xf7\xe1\xf2\x47\x08\x70\xcc\x7a\x14\xb8\x67\xd1\xe9\x0e\x09\x64\xed\x1f\xda\xef\x1a\x7b\xb3\x7b\xa4\xb2\xf0\x38\xed\x51\x59\x26\x7f\xe5\xa9\x91\xbb\x34\x5b\x45\xbd\xda\xa5\xc8\xa9\x0d\xe1\xf5\xee\x18\xed\x9f\x78\x06\x90\xbd\xe5\x99\x0b\xb3\x31\x72\xc5\xf7\x61\x01\xb6\x18\x36\x1a\x0a\xc7\xb8\xe7\x2c\xbf\xc5\x08\xde\xa1\x6a\xee\x4a\xba\x74\x6e\x7e\x28\xde\xbb\xdb\x46\x61\x60\xc7\x9b\xa6\x70\xf5\xdb\xf5\xb4\x48\xff\xa5\xb0\xe9\x26\xeb\x5a\xd9\x98\xe7\x9c\x3e\x6f\xd9\x4f\x9a\x3a\xae\xe0\x3e\xf8\xad\xa9\x1a\x62\xe2\x71\x3e\xf6\xd2\x53\x77\xfa\x28\x8f\xbe\x65\x2c\x13\x9c\x9f\xa0\x5c\xf6\x0f\x12\xf0\xf3\x77\x13\xb0\xf5\x0e\x49\x3d\x9c\x9f\xdc\xa2\xf7\x2b\x01\xf0\x9c\x07\xa9\xa9\x35\x0d\xa9\x8f\xfa\x75\x73\x6f\x48\xc3\xfd\x11\xa8\x7a\x3b\x4d\x95\x33\x0a\x03\xf3\xe8\x18\x65\x33\xe6\x9e\xad\x25\x1e\xbd\x47\x62\x0b\x95\x65\x54\x9c\x98\x99\x12\x49\x23\xb1\x45\xa3\x43\x45\x75\x01\xb8\xc9\x8d\x46\x80\xca\x48\x6f\xa7\x17\x34\xcc\x54\xde\xec\x4d\xae\xa7\x45\xa8\x54\x0d\xe9\x9b\x3e\x93\x68\x30\x5b\x32\x67\x48\x2b\x9e\x71\x96\x46\x62\xeb\x7b\x6a\xf7\xae\x6c\xe4\xc1\x06\x78\x15\x0f\xb1\x9c\xbf\x54\x1e\xa7\xce\x90\xf7\x54\xd9\xe9\x2e\x3e\xee\x50\xba\x86\x9c\x45\xe2\x47\xa7\x6c\x2e\x01\x6c\x6d\xac\xbc\xf5\x72\x5b\x6a\x4c\x91\x5c\x4f\x8b\xd4\xa1\x0b\xcc\x42\x42\xea\xc0\x8b\xdd\xd5\x72\x58\x8e\x15\x42\x71\x3e\xf6\x1f\x10\x16\xec\xc6\x12\x8a\x80\xe7\x4c\x32\x2a\x84\xd6\x79\x86\x0b\x6f\x92\xb7\x02\x08\xfb\x54\x2a\xae\x8f\xcd\xde\x44\x3f\x94\xec\xda\xa1\x29\x25\x66\x71\x55\x86\xf3\x23\xbc\xdf\x77\x68\xf3\xc4\x25\x8c\xd7\x18\x89\x59\xa8\xa8\x8f\xaf\xa7\xc5\x1f\xae\xa7\xc5\x27\x44\x8c\xcc\x15\x54\x46\x8f\xa1\xa2\x42\xa5\x84\xca\x0d\x6a\x47\x0c\x70\x53\x36\xf7\x86\x64\xc5\xe2\xd1\x13\x32\x9b\xa4\x22\xca\x0c\xe9\xa3\xef\xa9\xdd\x9f\x39\x9f\x20\x65\x19\x6a\x03\xdc\xc9\xe3\x9a\x68\xbe\x4b\x9b\xcd\xcf\x76\x77\xae\xbc\x76\x1a\xe3\x72\x05\xaa\x7d\xa8\xbd\x27\xfd\xbf\x71\x85\x72\xaa\x7e\x30\xb6\xe6\xc2\x39\x39\xc8\xbf\x2d\xc1\x59\xc7\x8a\x40\x43\xda\x0a\x81\xc8\xf5\xb4\x18\x80\x5a\x06\x77\xf2\xff\x66\x58\x4e\x60\x58\x0e\xf0\x01\xe3\xec\x8d\x91\xff\xac\xb7\xd3\x76\x28\x0b\x42\x3c\x99\xd8\xbc\x9e\x1e\xe2\xcf\x3d\xdc\xc9\x43\x55\xa5\x4f\xd1\x54\x45\xe2\x15\x3e\x18\x9a\xa9\x1d\xcb\x3f\x1e\xf5\xcd\xde\xc4\x3c\x3a\xa6\x75\x6e\xbd\x26\x97\x80\xbd\x21\xd4\xde\x22\xf5\xad\x71\x9a\xd5\x0f\xeb\x86\x3c\xa0\x79\x4e\xca\x52\x2e\x43\xe5\x03\x7d\xab\xb7\xd3\xb1\x6d\x0e\xf0\x70\xd2\x25\xcd\x3d\xf7\x01\x7d\x3d\x47\xa5\x9a\x5e\xf8\x64\x67\x87\x53\x1f\x6d\x80\xca\xfb\x4e\xad\x96\xa5\xf3\x33\x67\xc8\x03\xb3\x37\xa1\xc3\x8e\xa6\x34\x6e\xca\x8f\x91\xd8\x32\xde\x7d\xa4\x85\x4c\x76\xa8\x22\x1a\x67\x69\x5a\x6a\xcb\x42\x16\x8f\xd0\x59\x01\x15\xeb\x24\x7b\xef\xcc\x15\x3a\x45\x5c\xd9\xb9\x0d\xd6\x43\x09\x90\x20\x57\xaf\x10\x78\x15\x67\x79\xcf\xd4\x73\x4c\xf5\x6d\xb0\x6e\xf6\xbe\x98\x47\xef\xe0\xb4\x6d\xc8\x47\x68\xd4\xc4\x97\x1a\x6e\x5c\x99\x8d\x4b\xf7\x49\xda\x77\x19\xaa\x1c\x90\xbe\xe2\x58\x8c\xfa\x6d\x38\xc9\x84\x63\xb1\x17\x2c\x40\xfd\x73\x5c\x13\xa9\xbb\xef\xa9\x5d\x54\xaa\xc1\x59\xe9\x9f\x48\xcc\x9a\x6f\xba\x9e\x61\xf8\xf7\xc7\xf4\x85\x55\xa4\x44\x3a\x6b\x7b\x0f\xcc\x4c\x89\xa8\xde\x9b\x40\x65\x04\xe7\x12\x39\x63\x59\x9a\x99\x4d\x11\xa5\xa6\x54\x39\x27\xfd\xe7\x31\x7e\x9d\x8d\x84\xc2\x3c\x60\x04\x10\x8a\x27\xd7\xa3\x6c\x78\x51\xac\xde\xf1\x8f\x47\xef\x90\xa6\xea\x1f\x0b\xd4\x90\xca\x7d\xd7\x75\x93\x26\x97\x5e\x3d\xa7\x03\x46\xac\x1b\xa9\xcc\x06\x1f\x4b\xc6\xed\xe6\x53\x6e\x90\xd3\x4b\x3b\x4d\x72\xe7\x6c\x07\xa7\xce\xbe\xa7\x76\x1d\xa6\xba\x96\xd6\xa5\x9e\x5e\xc9\xa2\xd7\xe4\x7a\x6a\x13\xed\x97\xcc\x54\x1e\xf7\xb2\x50\x19\xa1\xc2\x37\x33\x95\xa7\x68\xa8\xb8\xf6\x81\xa2\x3e\x46\xe2\x21\xd2\x54\x0a\x91\x7a\xa3\x7a\xd8\x39\xb2\x08\x88\x1b\x57\xa4\x0f\x8c\xb3\xb8\x71\x82\x2f\x6a\xc4\x73\xe1\x37\xea\x90\x9e\xad\x6e\x66\x9b\x05\x8e\x2a\x41\x8d\x9c\xe0\xe9\xe4\xb0\x14\xbe\x79\x92\x16\xfc\x53\xeb\xd9\xd3\x1f\xff\x4a\x2a\x49\x55\x0d\x69\x6e\x36\x24\xa8\xf5\xf5\x7c\xf1\x6f\xe4\x62\xd8\x3f\xd3\xab\x5d\x92\x22\xbe\xc9\x85\x32\x43\x74\x9e\x42\x99\x1d\x43\x52\xf4\x76\xfa\xd9\xd3\x1f\xbd\x6b\xbe\xa7\x76\xc9\xf3\xa6\x4c\x15\xa1\xa5\xa9\x57\xbb\x58\x24\x82\x0b\xb1\x17\x80\x23\xc4\x69\xb7\xaa\x7e\x43\x9d\xe1\x26\x60\x22\x80\x87\xca\x88\xa2\xb1\xef\xfb\xed\xf4\xd3\x67\xff\x32\x64\x0d\x65\x5b\xb4\xe4\x6f\x0a\xe2\x3c\x98\xd2\xdc\x4a\x26\x00\xff\x88\xe5\x98\xb0\xc0\xbe\xf4\x14\x93\xd6\x35\xa4\x1e\x54\x4a\xf8\x52\x33\xbe\xee\x2d\x47\xca\x4d\x76\xfd\xb6\x59\x9b\x53\x16\xb8\xf3\x81\xd6\xd0\x72\x7e\x39\xb2\x7d\x80\x3a\x43\x9a\xf0\xb8\x9e\x83\xda\x95\x05\xdd\xea\x3a\x56\xb6\x3b\x6b\x46\x6a\xe3\x4e\x17\x2b\x19\xbd\x92\xf5\x46\x5f\x80\x4e\xde\x05\x1a\x77\x3e\xd0\xc6\x62\x5c\x9e\xfa\x80\x86\xda\xc1\x12\xab\x31\xcf\xfd\xde\x8b\xcf\x8f\xa1\x7a\xb0\x5c\xbc\xa4\x61\xa6\xda\x48\x51\x0c\x79\xa0\x9f\x6b\x76\xaf\x58\x54\xc9\x22\x77\xe1\x2c\x8b\x9b\x32\x6e\x9c\x40\x55\xa5\x37\x89\xa5\x57\x57\x0b\x74\xb0\xf3\xc2\x5c\xb0\xbb\xfb\x12\x44\x49\xfa\x5e\x21\xec\x92\xaa\x8d\xcd\x5c\xd9\x4d\xdb\xf7\x90\x5e\x95\x1e\x78\x2d\xb1\x70\x59\xa4\x7d\xd1\x50\x39\x1e\x16\x97\x16\xa6\x03\x29\x54\x4a\xc6\x55\xc6\x98\xe7\x7e\x80\xaa\x33\x33\x99\x64\x84\x15\x62\xee\x8b\xb9\x4d\x5f\xea\x91\xf4\x54\x55\xf4\xba\xf9\x50\xbe\x9e\x25\x46\xee\x02\x8d\x5f\xbb\xa2\xde\x72\x46\xb6\xc3\x3a\x4e\x68\xf7\x86\x5d\xb4\x17\xfa\xb5\x31\x64\x7d\x7b\x74\x7b\xbd\xd0\x74\xad\x8b\xca\xfb\xf6\x06\x74\x55\x5d\x9d\x93\xd1\xda\x1d\xd0\xfe\xe4\xf3\x31\x11\xaa\x45\x5d\x3d\x73\x1a\xf1\x20\x91\x8c\x0a\x6b\x41\x9c\xff\x88\xcb\x65\x7a\x19\x75\xf6\xfa\x65\x91\x85\x63\x5b\xf1\x28\xc3\x72\xf4\x58\x4d\xa6\x0d\xde\xcb\xa0\xec\x17\xcf\xc7\x25\xf9\x12\x37\x0f\x3c\x0a\x06\xff\x17\x00\x00\xff\xff\xc6\x25\xb1\x96\x3f\x15\x00\x00")

func outputTomlBytes() ([]byte, error) {
	return bindataRead(
		_outputToml,
		"output.toml",
	)
}

func outputToml() (*asset, error) {
	bytes, err := outputTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "output.toml", size: 5439, mode: os.FileMode(438), modTime: time.Unix(1678850362, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base.toml":   baseToml,
	"output.toml": outputToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"base.toml":   &bintree{baseToml, map[string]*bintree{}},
	"output.toml": &bintree{outputToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
