// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package bindata generated by go-bindata.
// sources:
// rules/base.toml
// rules/output.toml
package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _baseToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\x4f\x4f\xe3\x46\x18\xc6\xef\x96\xfc\x1d\x46\xcb\x81\xf6\x50\xd4\xed\xf6\xb0\xaa\xca\xb5\xb7\xf6\x50\xf5\x86\x56\x23\xc7\x7e\x09\x53\xec\xb1\x3b\x33\xce\x92\x1b\x2c\x2c\xb0\x15\x59\x42\xb5\x29\x7f\x76\x11\x8d\x4a\x81\x56\xda\x90\x6a\x11\x84\x04\x36\x5f\xc6\x63\x3b\x27\xbe\x42\x65\x4f\xc2\xe2\x84\x14\x52\x75\x2f\x9e\x01\x3f\xf6\xef\x7d\x9e\xf7\xd5\x38\x82\x08\x1b\xd0\x24\x7a\x90\x27\xc2\x36\x72\x9f\x39\x84\x9b\x2e\x9d\x26\x79\xa4\x96\x07\xba\xa6\x6b\x63\xc8\x63\xee\x8f\x60\x0a\x5d\x9b\xea\xee\xf8\x93\xf4\xc6\xf5\x9f\x13\xdd\x4d\x6f\xc5\x05\xc2\x49\x8e\xd8\x44\x14\x9f\xe8\xda\x98\x05\xdc\x64\xc4\x13\xc4\xa5\x93\x68\xbc\x53\x3d\x8f\x5e\xd7\xe4\xfa\x71\x7c\xb8\x10\xce\x1f\x8e\xeb\xda\xd8\x2c\x14\x9f\xba\xcc\xe2\x93\x68\x9c\x50\x01\x8c\x1a\xf6\xf8\x1d\x04\xcf\xc8\x03\xc7\x86\x69\x02\xe7\xd8\x86\x02\xd8\xc3\x48\xe1\xee\x62\x67\xbb\xdc\x87\xf1\x18\x29\x18\x02\xee\xa2\x70\x30\x7d\x46\x44\x11\x1b\xd4\xc2\xa6\xeb\x78\x36\x31\xa8\x09\x18\xa8\x91\xb3\xc1\x1a\x44\x86\x5b\xc7\xb2\x7c\x20\xcb\xc7\xd1\xab\x23\x15\xaa\xac\xbd\x90\xcf\x8f\xe4\xcf\x7b\xf1\xe2\x65\x5f\x11\x3f\x30\x5f\x55\x30\xbc\x00\xc3\xf3\x98\x5b\x30\x6c\x8e\x73\x30\xed\x32\xc0\x0e\xb0\x3c\x5c\xff\x1b\x53\xdf\xc9\x01\x7b\xa2\x6b\xd9\x32\xbe\x4d\x54\xe8\x7b\xf8\xc9\x07\x2e\x90\xac\x55\xc3\x17\xe7\x41\xb3\x19\x56\xea\xe3\xba\xf6\xa1\x82\x2f\xfe\x1d\xee\xf9\x7c\x06\x33\xdf\x06\x8e\x7d\xca\x49\x9e\x42\x1a\x82\x43\xd2\x01\xe8\x33\xfe\xf2\xa8\x33\xbf\x10\xb4\x7e\x8f\x7e\x5b\x50\x21\xc4\xed\xd7\x71\x7b\x25\x7a\xfb\x5e\x96\x4b\x19\xea\x7d\x7c\xdf\x40\x9b\xae\x43\x84\x00\x86\xcd\x19\x30\x67\x3f\x3a\x98\xb9\x02\x4c\x01\x16\xce\x31\x83\x9a\x33\xf0\xd1\xad\x76\x67\x58\xb8\xb3\x40\x07\x61\x5d\x15\x52\x2a\x94\xaa\xb2\x88\x6f\x0c\x9b\xdf\xc5\xb0\xc0\xb3\xdd\x22\x9e\x85\xe2\x70\x82\xd2\xa0\x44\x33\x3a\x60\x9a\xd8\x80\x3d\xe2\x81\x4d\x28\x0c\x43\x64\x55\x23\x07\x95\x8e\xbe\x75\x27\x05\x29\x1d\xfa\xbf\x38\x98\x8b\xe4\xac\xb9\x2f\x0e\x29\x79\x96\xfa\x9d\x4b\x47\xa5\x12\xc7\xc8\xdf\xdb\x23\x4a\xd5\x23\x33\xd3\x7e\x98\xae\x05\xee\x53\x0a\x6c\xb8\xc5\x44\x87\x3e\xe8\x46\x4e\x94\xcf\x18\x0c\x2c\xcc\x7c\x9a\x3c\x7e\xe3\xf4\xbc\x1d\xa7\xe4\xa8\x2b\x47\x5d\xf9\xe8\x43\xd9\xe3\xa9\xf7\x0d\xc5\xf5\x38\x4a\xf6\xdf\x31\xd4\x15\xf7\x24\x5d\x2b\x87\x24\x39\x86\x7c\x0e\x4c\xd7\xa6\x92\x25\x69\x8b\xda\x4c\x18\x96\x43\xa8\xba\x62\xc7\x98\xeb\x9e\xfe\x83\x7d\x8b\x0f\x16\xc2\xbf\x9f\xa9\xef\x4f\x54\xab\x46\xe5\x65\xb9\xb1\x15\x56\xea\x9d\x95\xf5\xa0\x51\x8a\x0f\x16\xe2\xd3\xe7\x71\x7b\xe5\x61\xd0\xf8\x2b\x53\xc1\xc3\xd4\x68\x97\xe5\x5b\x44\xb8\xac\xb7\x62\x1b\x0c\x2e\x7a\x44\x94\x45\xa2\x6b\x66\xbc\xf2\x4e\xd6\x37\xe2\xda\xfb\xe8\xb2\x16\x34\xe6\x65\xb9\x24\x6b\xd5\xb8\x56\x0d\x9a\x4d\xb9\xb1\x75\x03\x86\xb2\xb4\xee\x95\x1a\xa6\x20\x05\xc0\x82\x38\x30\x88\x08\x1a\xa5\x68\xbb\x25\x2f\x2b\x72\x7f\x47\xd6\x37\xe4\xfe\x9f\x61\xa5\x7e\x75\xb1\x26\x57\xb7\xe3\xc3\xe5\xa0\xd1\x0c\x1a\xa5\xf0\xa4\x15\x9f\x2d\x46\xaf\x8e\xc2\xd5\xb3\x2c\xee\xd1\xe7\x2a\xda\xd4\x90\xae\x4d\xa5\x2b\x86\x02\x50\xc1\x27\x6e\x07\xc6\x2f\xcf\xe4\xfa\xaf\x71\x7b\x23\x7c\xb3\x17\x6e\xfe\x21\xdb\x9b\xd1\xce\x92\xc2\xf6\x59\x79\xdc\x7b\x79\xd2\x1b\xc4\x41\x08\x42\xf3\xba\x36\xd5\xdd\xa5\x3d\xec\xed\x27\x3c\x83\xf3\xe4\xc9\x09\x87\x50\xe2\xf8\x0e\xb6\x81\xe6\xc5\xcc\x20\x5f\xd9\x50\x69\xca\xe3\xe5\xe4\x7b\xb3\x79\x7a\x75\xb1\xa6\xb2\x8e\x76\x96\xc2\x37\xf3\xd1\xde\x5b\x75\x2b\xda\x59\xea\x54\xda\xb2\x79\x90\x2d\xed\xf1\x4d\x32\x07\xce\x89\x4b\x31\xcc\x79\x84\x01\xb6\xc0\x36\x8a\xc3\xb0\xc1\xc5\x4e\x7c\xbc\xdb\x69\x6d\xc5\xb5\xfd\xa8\x75\x12\xae\x25\xf0\xce\xe6\x49\x12\x78\xa9\x12\x5c\x96\xbe\x92\xab\xcb\x9d\x5f\xf6\x06\x53\xbe\xc5\xa9\x9a\x9e\xf4\x17\x14\xcc\x0d\x12\xc3\x56\x35\x3e\x7d\xa7\x7c\xc8\xfd\x52\xb8\xfb\x4c\x36\x0f\x94\x3f\x59\x5f\xef\x54\xcf\xc3\x4a\xfd\x93\xaf\x27\xbf\xbc\xba\x58\x53\x05\x3d\xfa\xb4\x0f\xab\x6b\xff\x04\x00\x00\xff\xff\xeb\xde\x32\x99\xcd\x0a\x00\x00")

func baseTomlBytes() ([]byte, error) {
	return bindataRead(
		_baseToml,
		"base.toml",
	)
}

func baseToml() (*asset, error) {
	bytes, err := baseTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "base.toml", size: 2765, mode: os.FileMode(438), modTime: time.Unix(1678354675, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _outputToml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x97\x4f\x53\xe3\x36\x18\xc6\xef\x99\xc9\x77\xc8\xa4\x97\xf6\xc2\xa1\x77\x0e\xfd\x06\x3d\xf4\xc6\x30\x1e\xc7\x11\xa0\xe2\xd8\xae\x2c\x13\xf6\x96\xc0\x92\x0d\x10\xd6\x74\xca\xdf\x05\x1a\xd8\x4d\x13\x86\x6d\x9c\xec\x6c\x28\xc4\x66\x9b\x0f\xd3\x48\xb6\xbf\x45\x27\xb1\xa1\x8e\x65\x3b\x3e\x74\xf6\xe6\xb1\x9f\xf7\xd5\xef\x79\xa5\x57\x92\x31\xc4\x22\x58\xcc\xcb\x1a\x56\x34\x9c\x53\xf1\x2b\x11\xe4\x78\xa9\x98\x2b\x02\x55\x40\x50\xc1\x50\x96\xf2\xd9\x4c\x36\xf3\x4d\x6e\x15\x62\x91\x2f\xe4\x36\x00\x52\xa1\x2c\xe5\xca\x10\xaf\xe5\x10\x54\xd7\xb3\x99\x25\xff\xdd\xb2\x27\xe4\x8b\x25\x28\xe5\x54\x80\x31\x94\x56\xb3\x99\x25\xff\x49\x5d\x0e\x3c\x2f\x28\xbc\xaa\x96\x65\x54\x5c\xce\x66\x84\x35\x20\xac\x73\x48\x9b\x70\x90\x5e\xcd\xbe\xae\x92\xd6\x01\xbd\xda\x22\x66\x9b\x7e\xa8\xd0\xfb\xfd\x7c\x36\xb3\x0e\x5e\x4d\xd4\x8b\x18\x69\x20\x9b\x09\xc0\xc5\x87\xf0\xc5\x0d\x28\x24\xa4\x64\x59\x16\x44\x20\xad\xe2\xb5\x10\x12\xbd\xac\x90\xbe\xee\x1e\x8f\x88\xd9\x4e\x26\x09\x29\x9f\x01\x9c\x76\x95\x7e\xda\xa2\xc7\x7d\xd2\x3d\x8d\x1e\x57\xd2\x4a\xa1\x41\x43\x31\xb3\x83\xfe\x27\xe4\x80\xb4\x98\x7f\x4e\xc3\x21\xf0\x8b\x06\x11\xe0\x24\xad\x94\x0f\xa1\x85\xf2\xa5\x47\xd3\x14\x05\xa0\x48\x38\xd2\xea\x90\xda\x39\xe9\x9e\xd2\xde\x41\x72\x5d\x22\xf5\xb3\x08\xa1\x8f\x51\x73\x23\x97\xe3\x40\xfa\xfa\xd7\x04\x51\x15\x20\x40\x5e\x8c\x44\xb1\x77\x87\xd4\xd8\xb3\xff\x6c\x13\xfd\xe1\xff\x46\x09\xc2\xe0\xb2\xcc\xad\xf0\x02\x96\x11\xc7\x6b\xcc\x8a\x25\x7a\x83\x5c\x5c\xdb\x83\x6b\xc7\x68\x39\xbd\xea\x9c\xf6\x99\x15\x53\x5d\x77\x46\xfd\x60\xfb\xcc\x7e\x27\x96\xe9\x18\x46\x08\x07\x81\x55\xa8\xe2\xe9\xf4\xb0\x2f\x5f\x1e\x38\x20\xf1\x05\x11\x84\x60\xed\x76\xd5\x3e\xba\xa5\x9f\x6f\x49\xad\x41\xf6\x9a\xce\xf6\x97\x00\xef\x0a\x2f\xaa\x61\x60\x36\x80\x61\x66\x25\x2f\xd8\x11\x7c\xa0\xc4\x43\x91\x13\x64\x69\x05\xa2\x12\x8f\xbd\x8d\x6c\xa6\x9e\x87\x3d\xfb\xe8\xd6\xdd\x32\x6c\xe3\x93\x7b\xd7\x98\x5f\x52\x46\xcf\x56\x95\x91\x24\x11\x4e\x77\x54\x8e\x57\x14\x24\x6f\x30\x2b\x8f\x9e\xf4\x27\x66\xeb\x0f\xbe\xdf\xc3\xb7\xee\x65\xc5\xee\xee\x92\xbf\x77\xa6\x71\x74\x77\x48\xde\xd4\xe6\xec\x5c\xa9\x72\x30\x2e\xd2\x85\x25\xd6\x7e\x13\x03\x24\xb1\x9e\xbc\x7c\x0d\x93\xd4\x6b\xa4\x75\xe2\x6e\xdf\xfe\x53\xa9\x92\xda\x8e\xbb\x7d\xeb\x0d\x38\xc7\xce\xbc\x70\xd6\xc9\xbc\x88\xf9\x0b\x08\x81\x55\xb0\xa9\x70\x50\x8a\x74\xe4\x4d\x35\xed\x7e\x20\xf5\x73\xd2\x18\xba\x3b\x07\xe9\xed\x24\xc7\x32\x5e\x92\xe5\x91\x0d\x0c\x25\x88\x39\x05\xc9\x3f\x03\x01\xfb\x6d\xca\x15\xc1\x0a\xaf\x89\x98\x2b\x20\x5e\x12\xd6\x26\x5f\x31\x10\xa2\xba\xa3\x7e\x45\x3a\xfb\xa4\x71\x62\xbf\x7b\xed\xde\x0c\xed\x0b\xc3\x5f\xdc\xd6\x99\x63\xb4\x48\xbd\x46\x8f\x7a\xe3\xd1\x15\xdd\x6b\x05\x5c\x7e\x1f\x6e\x99\xd4\x49\xd8\x56\x4a\x1d\x1a\x69\x7d\x45\x46\x05\x58\xe4\x04\x04\x78\x0c\x38\x45\x2b\x88\x50\x78\x2e\x05\xbb\x55\xd1\xee\x7b\x62\x99\xf6\xc7\x7d\x4f\xe8\x8d\x17\xf0\xe5\x6b\xe8\xc5\x80\x1e\x0d\x89\xde\x73\x3a\x55\x5a\xe9\x8c\x1f\x4d\x4f\x1f\x3e\x96\xe3\x32\x46\xed\x68\x91\xc2\x04\x63\x65\x50\xe0\x54\xa0\x4e\x2e\x66\x1c\xd8\x54\x20\x62\x76\xde\xe9\x7a\xb0\xcf\x2d\xf2\xe5\xb8\x0c\x0a\xee\xcd\xbd\x7b\xf5\x7e\xfc\xf4\xce\xe9\x5d\x91\xee\x19\x1d\x58\xf4\xf4\x2f\xf7\x74\xc0\x30\xa7\x0b\x63\x2d\xa4\x8b\x8b\xf4\xa2\xf0\x38\xda\xc3\x8f\x3f\xfc\xf4\xed\xf8\xf1\x6e\x6c\x9a\x8e\x31\x72\x4f\x8d\xb1\xd5\xb2\x77\x1b\xdf\x4d\x6e\x62\xad\x8e\x7d\xd4\x9c\x64\x8e\x74\x91\x3a\x90\xf1\x91\x3a\x32\xe8\x44\x53\x01\x5a\x80\x12\x2f\x60\xb8\xc1\xcc\x83\xd5\x74\x8c\x9b\xf1\xe3\x01\x1d\x58\xce\xc3\xf6\xcb\x8e\x30\x5b\xf5\x28\x11\x5b\xe3\x28\x15\xc3\xa1\x25\x71\xd0\xcb\x3b\xaf\x7f\x9c\x41\x3b\x96\x23\x24\x8a\xe1\x08\xa9\x18\x8e\xe4\x5b\x8c\x97\x83\x3c\x55\xc8\x61\x2f\x74\x09\xf1\xdd\x1f\xf7\xdd\x37\x7a\x34\xe0\xdc\xb0\x18\xe4\xb9\x71\x8c\x89\xe9\x41\x17\x89\xee\x1d\x81\x09\x90\x01\x41\x0c\x4e\x40\xc1\x0e\xac\x15\x21\x96\xc3\x57\x62\xdf\x86\x71\x33\x59\x07\xa6\x49\x7e\x3d\x4b\x2c\x13\xa3\x8b\xab\x0b\x23\x64\x78\x62\x8e\x72\x3f\x7e\x7a\xa6\xa6\x98\x37\x46\x17\x07\xc4\x08\x03\x40\xd9\xcc\x92\xf7\x43\xcb\x4d\x7f\x6f\xc3\x44\x9f\x2d\xdb\x6a\x12\x7d\xcf\x6f\x8f\xa6\x69\x9b\xa3\xc9\x6f\x61\xf3\x0f\xf7\x66\x98\xcf\x66\x54\x20\xc8\x52\x91\x0b\xc6\x8c\xcd\x86\x6d\x76\x82\x22\x04\x54\x4d\xc4\x8b\x79\xba\xfb\x91\xea\xba\x6d\xfd\x46\x7f\xbf\x0c\x1e\x04\xee\x59\x9d\x54\x9e\xf2\xd9\x8c\x20\x97\x14\x91\x87\x92\x77\xed\xab\x3b\x9d\xd7\x74\x7b\x87\xd4\xee\x99\x5f\xb4\xde\x80\x9e\xbd\x0d\x1e\x6c\x9e\xa1\x7f\x03\x00\x00\xff\xff\x65\xd2\x56\x07\xa2\x0f\x00\x00")

func outputTomlBytes() ([]byte, error) {
	return bindataRead(
		_outputToml,
		"output.toml",
	)
}

func outputToml() (*asset, error) {
	bytes, err := outputTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "output.toml", size: 4002, mode: os.FileMode(438), modTime: time.Unix(1678411184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"base.toml":   baseToml,
	"output.toml": outputToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"base.toml":   &bintree{baseToml, map[string]*bintree{}},
	"output.toml": &bintree{outputToml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
